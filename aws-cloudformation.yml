AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sudoku Pro - Production Infrastructure'

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the application (e.g., sudoku.yourdomain.com)
    Default: ''
  
  CertificateArn:
    Type: String
    Description: ARN of SSL certificate from ACM
    Default: ''

Resources:
  # ECS Cluster
  SudokuCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: sudoku-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # CloudWatch Log Group
  SudokuLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/sudoku-app
      RetentionInDays: 30

  # ECR Repository
  SudokuECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: sudoku-pro
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # Security Group
  SudokuSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sudoku-sg
      GroupDescription: Security group for Sudoku Pro
      VpcId: !Ref AWS::NoValue
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  SudokuLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: sudoku-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref SudokuSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # Target Group
  SudokuTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: sudoku-tg
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # HTTP Listener
  SudokuHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SudokuLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SudokuTargetGroup

  # HTTPS Listener (if certificate provided)
  SudokuHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref SudokuLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SudokuTargetGroup

  # ECS Task Definition
  SudokuTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: sudoku-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: sudoku-app
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sudoku-pro:latest'
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Environment:
            - Name: FLASK_ENV
              Value: production
            - Name: SECRET_KEY
              Value: !Sub '{{resolve:secretsmanager:${SudokuSecret}:SecretString:secret_key}}'
            - Name: HOST
              Value: '0.0.0.0'
            - Name: PORT
              Value: '5000'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SudokuLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:5000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  SudokuService:
    Type: AWS::ECS::Service
    DependsOn: SudokuHTTPListener
    Properties:
      ServiceName: sudoku-service
      Cluster: !Ref SudokuCluster
      TaskDefinition: !Ref SudokuTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SudokuSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: sudoku-app
          ContainerPort: 5000
          TargetGroupArn: !Ref SudokuTargetGroup

  # Auto Scaling Target
  SudokuAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub 'service/${SudokuCluster}/${SudokuService}'
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  SudokuAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: sudoku-cpu-policy
      PolicyType: TargetTrackingScaling
      ScalableTarget: !Ref SudokuAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # Secrets Manager Secret
  SudokuSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: sudoku-pro-secret
      Description: Secret for Sudoku Pro application
      SecretString: !Sub |
        {
          "secret_key": "${SecretKey}"

  # Secret Key (randomly generated)
  SecretKey:
    Type: AWS::SSM::Parameter::Value::String
    Default: /sudoku/secret-key

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRPullPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsServiceAutoScalingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  # CloudWatch Dashboard
  SudokuDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: SudokuMetrics
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [["AWS/ECS", "CPUUtilization", "ServiceName", "${SudokuService}", "ClusterName", "${SudokuCluster}"]],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "CPU Utilization"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [["AWS/ECS", "MemoryUtilization", "ServiceName", "${SudokuService}", "ClusterName", "${SudokuCluster}"]],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Memory Utilization"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [["AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${SudokuLoadBalancer}", "TargetGroup", "${SudokuTargetGroup}"]],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Request Count"
              }
            }
          ]
        }

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt SudokuLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sudoku-pro'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryURI'

  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref SudokuCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ServiceName:
    Description: Name of the ECS service
    Value: !Ref SudokuService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName' 